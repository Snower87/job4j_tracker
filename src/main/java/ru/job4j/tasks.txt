#task_85 (#85)
 * @Раздел Блок 3. Collections. Lite / 2. Коллекция Set, HashSet
 * @Задание 0. Set, HashSet, Iterator. [#10095 #23682]
 * @Описание 1. Создайте класс ru.job4j.collection.UsageHashSet. В методе main допишите код.
 * 2. Добавьте в коллекцию autos марки машин: Lada, BMW, Volvo, Toyota.
 * 3. Добавьте цикл for-each и выведите элементы коллекции HashSet на консоль.
 * 4. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_86 (#86):
  * @Раздел Блок 3. Collections. Lite / 2. Коллекция Set, HashSet
  * @Задание 1. Уникальные задачи. [#212653 #23683]
  * @Описание 1. Реализуйте метод ru.job4j.collection.FullSearch.extractNumber.
  * 2. Напишите тесты. Протестируйте код в junit.
  * 3. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_87 (#87):
  * @Раздел Блок 3. Collections. Lite / 2. Коллекция Set, HashSet
  * @Задание 2. Идентичные тексты. [#212655 #23684]
  * @Описание 1. Реализуйте метод ru.job4j.collection.UniqueText.isEquals.
  * 2. Напишите тесты. Протестируйте код в junit.
  * 3. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_88 (#88):
  * @Раздел Блок 3. Collections. Lite / 2. Коллекция Set, HashSet
  * @Задание 3. Модели данных и HashSet. [#218530 #23685]
  * @Описание 1. Реализуйте метод ru.job4j.collection.NotifyAccount.sent.
  * 2. Допишите тесты, которые проверяют удаление дубликатов. Протестируйте код в junit.
  * 3. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_89 (#89):
  * @Раздел Блок 3. Collections. Lite / 3. Коллекция Map, HashMap
  * @Задание 0. Map, HashMap. [#212652 #23687]
  * @Описание 1. Создайте класс ru.job4j.collection.UsageMap. В классе создайте метод main.
  * 2. Внутри метода main создайте коллекцию HashMap<String, String>.
  *  - Добавьте туда почту в качестве ключа и фио в качестве значения.
  *  - Добавьте цикл for-each по ключу и выведите на печать элементы коллекции.
  * 3. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_90 (#90):
  * @Раздел Блок 3. Collections. Lite / 3. Коллекция Map, HashMap
  * @Задание 1. Паспорт и жители. [#212656 #23688]
  * @Описание 1. Создайте класс ru.job4j.collection.PassportOffice.
  * 2. Реализуйте недостающий код. Сервис должен проверять, что гражданина с таким паспортом еще нет, а так же
  *    возможность получить информацию о гражданине по его паспорту (методы add() и get()).
  * 3. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_91 (#91), 13.08.21:
  * @Раздел Блок 3. Collections. Lite / 3. Коллекция Map, HashMap
  * @Задание 2. Преобразования List в Map. [#10093 #23686]
  * @Описание 1. Реализуйте метод process. В качестве ключа установите поле number.
  * Внутри метода process нужно пройти по всем элементам списка orders и вставить их в map.
  * 2. Напишите тесты. Протестируйте код в junit.
  * 3. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_92 (#92), 14.08.21:
  * @Раздел Блок 3. Collections. Lite / 3. Коллекция Map, HashMap
  * @Задание 3. Банковские переводы. [#10038 #23689]
  * @Описание 1. В этом задании вам нужно Реализуйте банковский сервис. Система должна производить следующие действия:
  * - 1) Регистрировать пользователя.
  * - 2) Удалять пользователя из системы.
  * - 3) Добавлять пользователю банковский счет. У пользователя системы могут быть несколько счетов.
  * - 4) Переводить деньги с одного банковского счета на другой счет.
  * 2. Напишите тесты. Протестируйте код в junit.
  * 3. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_92 (#92), 14.08.21:
  * @Раздел Блок 3. Collections. Lite / 3. Коллекция Map, HashMap
  * @Задание 3. Банковские переводы. [#10038 #23689]
  * @Описание 1. В этом задании вам нужно Реализуйте банковский сервис. Система должна производить следующие действия:
  * - 1) Регистрировать пользователя.
  * - 2) Удалять пользователя из системы.
  * - 3) Добавлять пользователю банковский счет. У пользователя системы могут быть несколько счетов.
  * - 4) Переводить деньги с одного банковского счета на другой счет.
  * 2. Напишите тесты. Протестируйте код в junit.
  * 3. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_93 (#93), 14.08.21:
  * @Раздел Блок 3. Collections. Lite / 3. Коллекция Map, HashMap
  * @Задание Устранение ошибок в п.3. Банковские переводы. [#10038 #23689]
=============================================================================================
#task_94 (#94), 14.08.21:
  * @Раздел Блок 3. Collections. Lite / 3. Коллекция Map, HashMap
  * @Задание Устранение ошибок в п.3. Банковские переводы. [#10038 #23689]
=============================================================================================
#task_95 (#95), 15.08.21:
  * @Раздел Блок 3. Collections. Lite / 4. Сортировка
  * @Задание 0. Сортировка. [#10096 #23679]
  * @Описание 1. Создайте для модели данных ru.job4j.tracker.Item компаратор, который сортирует данные по возрастанию.
  * 2. Создайте для модели данных ru.job4j.tracker.Item компаратор, который сортирует данные по убыванию.
  * 3. Напишите тесты с демонстрацией сортировки по возрастанию и убыванию.
  * 4. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_96 (#96), 16.08.21:
  * @Раздел Блок 3. Collections. Lite / 4. Сортировка
  * @Задание 1. Организовать сортировку User. [#10034 #23678]
  * @Описание 1. В этом задании нужно осуществить сортировку для модели ru.job4j.collection.User.
  * 2. В модели должны быть поля: имя и возраст. Предусмотреть ситуацию, когда два пользователя имеют одинаковое имя.
  * В этом случае нужно сравнить их возраст. Класс User должен реализовать интерфейс Comparable.
  * 3. Напишите тесты. Протестируйте код в junit.
  * 4. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_97 (#97), 17.08.21:
  * @Раздел Блок 3. Collections. Lite / 4. Сортировка
  * @Задание 2. Комбинированный компаратор. [#10036 #23680]
  * @Описание 1. Для модели ru.job4j.collection.Job создайте 4 компаратора:
  * - по возрастанию имени;
  * - по возрастанию приоритета;
  * - по убыванию имени;
  * - по убыванию приоритета.
  * 2. Протестируйте код в junit.
  * 2.1 Напишите тесты, проверяющие отдельно поведение компараторов.
  * 2.2 Напишите тесты, проверяющие поведение комбинированных компараторов.
  * 3. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_98 (#98), 18.08.21:
  * @Раздел Блок 3. Collections. Lite / 4. Сортировка
  * @Задание 3. Компаратор для строк. [#35008 #23677]
  * @Описание 1. Реализуйте класс ru.job4j.collection.StringCompare, который должен реализовать поэлементное
  * сравнение двух списков, т.е. сравниваем элементы двух списков, находящихся на одних и тех же позициях (под одним и
  * тем же индексом). Для решения задачи используйте:
  * - String.charAt(int index)
  * - Integer.compare(int left, int right),
  * - Character.compare(char left, char right);
  * 2. Добавьте недостающие тесты. Протестируйте код в junit.
  * 3. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_99 (#99), 18.08.21:
  * @Раздел Блок 3. Collections. Lite / 4. Сортировка
  * @Задание Устранение ошибок в п.3. Компаратор для строк. [#35008 #23677]
=============================================================================================
#task_100 (#100), 18.08.21:
  * @Раздел Блок 3. Collections. Lite / 4. Сортировка
  * @Задание 4. Сортировка номера. [#221284 #23681]
  * @Описание 1. Реализуйте компаратор LexSort. Он должен сравнивать начальный номер, а не целиком строку.
  * 2. Напишите тесты. Протестируйте код в junit.
  * 3. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_101 (#101), 18.08.21:
  * @Раздел Блок 3. Collections. Lite / 4. Сортировка
  * @Задание Устранение ошибок в п.4. Сортировка номера. [#221284 #23681]
=============================================================================================
#task_102 (#102), 19.08.21:
  * @Раздел Блок 4. Lambda, Stream API, FP / 1. Lambda
  * @Задание 1.1. Анонимные классы. [#214142 #23498]
  * @Описание 1. Создайте анонимный класс на основе интерфейса Comparator для модели Attachment. Класс должен сравнивать
  * имена объектов Attachment.
  * 2. Добавьте код из пункта 1 в конструкцию, приведенную ниже:
  * 3. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_103 (#103), 22.08.21:
  * @Раздел Блок 4. Lambda, Stream API, FP / 1. Lambda
  * @Задание 1.2. Функциональный интерфейс. [#247497 #23499]
  * @Описание 1. Вам необходимо заменить выполняемые стандартные операции для коллекций -> на применение встроенных
  * функциональных интерфейсов.
  * 2. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_104 (#104), 23.08.21:
  * @Раздел Блок 4. Lambda, Stream API, FP / 1. Lambda
  * @Задание Устранение ошибок в п.1.2. Функциональный интерфейс. [#247497 #23499]
=============================================================================================
#task_105 (#105), 23.08.21:
  * @Раздел Блок 4. Lambda, Stream API, FP / 1. Lambda
  * @Задание 1.3. Встроенные функциональные интерфейсы. [#249209 #23500]
  * @Описание 1. Представлена модель данных Folder, а также каркас класса SearchFolder.
  * 2. Обратите внимание, что методы filterSize() и filterName() содержат дублирование кода - по сути они отличаются
  * друг от друга только проверкой в if(). Ваша задача - реализовать универсальный метод filter(), для проверки в if()
  * в нем вы будете использовать функциональный интерфейс Predicate. После реализации - методы filterSize() и
  * filterName() нужно будет удалить.
  * 3. Напишите тесты. Протестируйте код в junit.
  * 4. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_106 (#106), 24.08.21:
  * @Раздел Блок 4. Lambda, Stream API, FP / 1. Lambda
  * @Задание 2.1. Лямбда. [#58165 #23501]
  * @Описание 1. Создайте компаратор для строк через лямбда. Строки должны сравниваться через метод compareTo.
  * - Comparator<String> cmpText = (left, right) -> ... ;
  * 2. Создайте компаратор для строк через лямбда. Компаратор должен сортировать строки по убыванию длины.
  * - Comparator<String> cmpDescSize = (left, right) -> ... ;
  * 3. Напишите тесты. Протестируйте код в junit.
  * 4. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_107 (#107), 24.08.21:
  * @Раздел Блок 4. Lambda, Stream API, FP / 1. Lambda
  * @Задание 2.2. Лямбда блок. [#249208 #23491]
  * @Описание 1. В предыдущем задании нужно было создать компаратор для строк. Сравнение должно быть в порядке убывания.
  * 2. Добавьте отладочную информацию в лямбда в этом задании. Сделайте это в методе main() класса LambdaUsage.
  * 3. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_108 (#108), 25.08.21:
  * @Раздел Блок 4. Lambda, Stream API, FP / 1. Lambda
  * @Задание 2.3. Ленивая загрузка. [#249211 #23493]
  * @Описание 1. Ознакомьтесь с отложенным выполнением лямбда.
  * 2. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_109 (#109), 25.08.21:
  * @Раздел Блок 4. Lambda, Stream API, FP / 1. Lambda
  * @Задание 3. Ссылки на методы. [#70608 #23494]
  * @Описание 1. Приведен код. Класс выводит на консоль список имен. Если имя больше 10 символов, то вывод обрезается.
  * 2. Нужно упростить вызов лямбда за счет оператор (::).
  * 3. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_110 (#110), 25.08.21:
  * @Раздел Блок 4. Lambda, Stream API, FP / 1. Lambda
  * @Задание 4. Зона видимости в лямбда-выражениях и исключения. [#70609 #23495]
  * @Описание 1. Приведен код, который складывает числа массива. Нужно исправить ошибку.
  * 2. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_111 (#111), 25.08.21:
  * @Раздел Блок 4. Lambda, Stream API, FP / 1. Lambda
  * @Задание 5. Подсчет функции в диапазоне. [#24251 #23496]
  * @Описание 1. Реализовать метод подсчета функции в диапазоне.
  * - List<Double> diapason(int start, int end, Function<Double, Double> func);
  * 2. Реализуйте функции в тестах.
  *    - линейная,
  *    - квадратичная,
  *    - показательная (y = a^x, где a - постоянная).
  * 3. Напишите тесты. Протестируйте код в junit.
  * 4. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_112 (#112), 29.08.21:
  * @Раздел Блок 4. Lambda, Stream API, FP / 1. Lambda
  * @Задание 6. Функции высшего порядка. [#24255 #23497]
  * @Описание 1. Вернемся к заданию "Телефонный справочник". Условие задания. Есть список абонентов.
  * Нужно отфильтровать их по ключу.
  * 2. Допишите метод find(String key) с использованием функции высшего порядка. Примените функциональный интерфейс
  * java.util.function.Predicate и метод or.
  * 3. Напишите тесты. Протестируйте код в junit.
  * 4. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_113 (#113), 29.08.21:
  * @Раздел Блок 4. Lambda, Stream API, FP / 1. Lambda
  * @Задание Устранение ошибок в п.6. Функции высшего порядка. [#24255 #23497]