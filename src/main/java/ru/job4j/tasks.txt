#task_85 (#85)
 * @Раздел Блок 3. Collections. Lite / 2. Коллекция Set, HashSet
 * @Задание 0. Set, HashSet, Iterator. [#10095 #23682]
 * @Описание 1. Создайте класс ru.job4j.collection.UsageHashSet. В методе main допишите код.
 * 2. Добавьте в коллекцию autos марки машин: Lada, BMW, Volvo, Toyota.
 * 3. Добавьте цикл for-each и выведите элементы коллекции HashSet на консоль.
 * 4. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_86 (#86):
  * @Раздел Блок 3. Collections. Lite / 2. Коллекция Set, HashSet
  * @Задание 1. Уникальные задачи. [#212653 #23683]
  * @Описание 1. Реализуйте метод ru.job4j.collection.FullSearch.extractNumber.
  * 2. Напишите тесты. Протестируйте код в junit.
  * 3. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_87 (#87):
  * @Раздел Блок 3. Collections. Lite / 2. Коллекция Set, HashSet
  * @Задание 2. Идентичные тексты. [#212655 #23684]
  * @Описание 1. Реализуйте метод ru.job4j.collection.UniqueText.isEquals.
  * 2. Напишите тесты. Протестируйте код в junit.
  * 3. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_88 (#88):
  * @Раздел Блок 3. Collections. Lite / 2. Коллекция Set, HashSet
  * @Задание 3. Модели данных и HashSet. [#218530 #23685]
  * @Описание 1. Реализуйте метод ru.job4j.collection.NotifyAccount.sent.
  * 2. Допишите тесты, которые проверяют удаление дубликатов. Протестируйте код в junit.
  * 3. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_89 (#89):
  * @Раздел Блок 3. Collections. Lite / 3. Коллекция Map, HashMap
  * @Задание 0. Map, HashMap. [#212652 #23687]
  * @Описание 1. Создайте класс ru.job4j.collection.UsageMap. В классе создайте метод main.
  * 2. Внутри метода main создайте коллекцию HashMap<String, String>.
  *  - Добавьте туда почту в качестве ключа и фио в качестве значения.
  *  - Добавьте цикл for-each по ключу и выведите на печать элементы коллекции.
  * 3. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_90 (#90):
  * @Раздел Блок 3. Collections. Lite / 3. Коллекция Map, HashMap
  * @Задание 1. Паспорт и жители. [#212656 #23688]
  * @Описание 1. Создайте класс ru.job4j.collection.PassportOffice.
  * 2. Реализуйте недостающий код. Сервис должен проверять, что гражданина с таким паспортом еще нет, а так же
  *    возможность получить информацию о гражданине по его паспорту (методы add() и get()).
  * 3. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_91 (#91), 13.08.21:
  * @Раздел Блок 3. Collections. Lite / 3. Коллекция Map, HashMap
  * @Задание 2. Преобразования List в Map. [#10093 #23686]
  * @Описание 1. Реализуйте метод process. В качестве ключа установите поле number.
  * Внутри метода process нужно пройти по всем элементам списка orders и вставить их в map.
  * 2. Напишите тесты. Протестируйте код в junit.
  * 3. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_92 (#92), 14.08.21:
  * @Раздел Блок 3. Collections. Lite / 3. Коллекция Map, HashMap
  * @Задание 3. Банковские переводы. [#10038 #23689]
  * @Описание 1. В этом задании вам нужно Реализуйте банковский сервис. Система должна производить следующие действия:
  * - 1) Регистрировать пользователя.
  * - 2) Удалять пользователя из системы.
  * - 3) Добавлять пользователю банковский счет. У пользователя системы могут быть несколько счетов.
  * - 4) Переводить деньги с одного банковского счета на другой счет.
  * 2. Напишите тесты. Протестируйте код в junit.
  * 3. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_92 (#92), 14.08.21:
  * @Раздел Блок 3. Collections. Lite / 3. Коллекция Map, HashMap
  * @Задание 3. Банковские переводы. [#10038 #23689]
  * @Описание 1. В этом задании вам нужно Реализуйте банковский сервис. Система должна производить следующие действия:
  * - 1) Регистрировать пользователя.
  * - 2) Удалять пользователя из системы.
  * - 3) Добавлять пользователю банковский счет. У пользователя системы могут быть несколько счетов.
  * - 4) Переводить деньги с одного банковского счета на другой счет.
  * 2. Напишите тесты. Протестируйте код в junit.
  * 3. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_93 (#93), 14.08.21:
  * @Раздел Блок 3. Collections. Lite / 3. Коллекция Map, HashMap
  * @Задание Устранение ошибок в п.3. Банковские переводы. [#10038 #23689]
=============================================================================================
#task_94 (#94), 14.08.21:
  * @Раздел Блок 3. Collections. Lite / 3. Коллекция Map, HashMap
  * @Задание Устранение ошибок в п.3. Банковские переводы. [#10038 #23689]
=============================================================================================
#task_95 (#95), 15.08.21:
  * @Раздел Блок 3. Collections. Lite / 4. Сортировка
  * @Задание 0. Сортировка. [#10096 #23679]
  * @Описание 1. Создайте для модели данных ru.job4j.tracker.Item компаратор, который сортирует данные по возрастанию.
  * 2. Создайте для модели данных ru.job4j.tracker.Item компаратор, который сортирует данные по убыванию.
  * 3. Напишите тесты с демонстрацией сортировки по возрастанию и убыванию.
  * 4. Загрузите код в github. Оставьте ссылку на коммит.
=============================================================================================
#task_96 (#96), 16.08.21:
  * @Раздел Блок 3. Collections. Lite / 4. Сортировка
  * @Задание 1. Организовать сортировку User. [#10034 #23678]
  * @Описание В этом задании нужно осуществить сортировку для модели ru.job4j.collection.User.
  * 2. В модели должны быть поля: имя и возраст. Предусмотреть ситуацию, когда два пользователя имеют одинаковое имя.
  * В этом случае нужно сравнить их возраст. Класс User должен реализовать интерфейс Comparable.
  * 3. Напишите тесты. Протестируйте код в junit.
  * 4. Загрузите код в github. Оставьте ссылку на коммит.