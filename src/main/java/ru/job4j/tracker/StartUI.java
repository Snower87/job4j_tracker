package ru.job4j.tracker;

import java.util.Arrays;
import java.util.Scanner;

/**
 * @Раздел Блок 2. ООП / 3. Инкапсуляция
 * @Задание 5. Tracker - хранилище. [396#271567] (ver.1)
 * @Описание 1. Добавьте недостающие методы в класс Tracker. В классе Tracker должны быть методы:
 * - добавление заявок - public Item add(Item item);
 * - получение списка всех заявок - public Item[] findAll();
 * - получение списка по имени - public Item[] findByName(String key);
 * - получение заявки по id - public Item findById(int id);
 * 2. Создайте класс ru.job4j.tracker.StartUI. В нем создайте метод main.
 * - Внутри метода main создайте объект Tracker. Вызовите у него метод add с объектом Item.
 * - Вызовите метод findById и найденный Item выведите на консоль.
 * 3. Напишите тесты. Протестируйте код в junit.
 * 4. Загрузите код в github. Оставьте ссылку на коммит.
 *
 * @Раздел Блок 2. ООП / 4. Полиморфизм
 * @Задание 2.1. Реализация класса StartUI. [784#271514] (ver.2)
 * @Описание 1. Доработайте класс ru.job4j.tracker.StartUI.
 * 2. Программа должна выводить меню. Каждый пункт меню должен работать.
 * 3. Загрузите код в github. Оставьте ссылку на коммит.
 * Примечание:
 * 1. В случае вывода массивов, массив нужно выводить поэлементно
 * 2. Для методов replace/delete сделать вывод в виде:
 * if (tracker.replace(id, newItem)) {
 *     // вывод об успешности операции
 * } else {
 *     // вывод об ошибке
 * }
 * 3. Объяснение:
 * Пункт меню 1 - Show all items:
 * 1.1. У объекта tracker вызвать метод findAll();
 * 1.2. Результат вызова поместить в переменную - это будет массив элементов класса Item;
 * 1.3. Вывести в консоль все элементы массива, выполнить в соответствии с примечанием 1.
 *
 * Пункт меню 2 - Edit item:
 * 2.1. Получить id заявки, которую мы будем изменять, через объект scanner;
 * 2.2. Получить имя заявки на которую мы будем заменять через объект scanner;
 * 2.3. Создаем объект класса Item, у которого устанавливаем имя из пункта 2.2;
 * 2.4. Вызвать метод replace у объекта tracker, в него передать id из пункта 2.1 и объект класса Item из пункта 2.3;
 * 2.5. Результат работы метода replace необходимо валидировать, для этого учтите рекомендацию из примечания 2.
 *
 * Пункт 3 - Delete item:
 * 3.1. Получить id заявки, которую мы будем удалять, через объект scanner;
 * 3.2. Вызвать метод delete у объекта tracker, в него передать id из пункта 3.1;
 * 3.3. Результат работы метода delete необходимо валидировать, для этого учтите рекомендацию из примечания 2.
 *
 * Пункт 4 - Find item by Id:
 * 4.1. Получить id заявки, которую мы будем искать в хранилище, через объект scanner;
 * 4.2. Вызвать метод findById() у объекта tracker, в него передать id из пункта 4.1;
 * 4.3. Результат вызова метода поместить в переменную - это будет объект класса Item;
 * 4.4. Результат работы метода findById() необходимо валидировать, поскольку метод может вернуть null;
 * 4.5. Если заявка не равна null -  мы печатаем в консоль заявку, иначе - фразу: "Заявка с таким id не найдена".
 *
 * Пункт 5 - Find items by name:
 * 5.1. Получить имя заявок, которые мы будем искать, через объект scanner;
 * 5.2. Вызвать метод findByName() у объекта tracker, в него передать имя из пункта 1;
 * 5.3. Результат вызова метода поместить в переменную - это будет массив объектов класса Item;
 * 5.4. Результат работы метода findByName() необходимо валидировать, поскольку метод может вернуть пустой массив;
 * 5.5. Если длина массива больше 0 - выводим массив в соответствии с примечанием 1, иначе фразу - "Заявки с таким именем
 *      не найдены".
 *
 * @Раздел Блок 2. ООП / 4. Полиморфизм
 * @Задание 4.1. Разрыв зависимости StartUI от Scanner. [181778 #271509] (ver.3)
 * @Описание 1. Разорвите зависимость класса StartUI от класса Scanner.
 * 2. Загрузите код в github. Оставьте ссылку на коммит.
 *
 * @Раздел Блок 2. ООП / 4. Полиморфизм
 * @Задание 4.2. Статические методы. [181779#271510] (ver.4)
 * @Описание 1. Создайте статические методы createItem, replaceItem, deteleItem и тд.
 * 2. Загрузите код в github. Оставьте ссылку на коммит.
 *
 * @Раздел Блок 2. ООП / 4. Полиморфизм
 * @Задание Переопределение метода toString() (ver.5)
 * @Описание 1. Исправление ошибки. Переопределение метода toString().
 * 2. Загрузите код в github. Оставьте ссылку на коммит.
 *
 * @Раздел Блок 2. ООП / 4. Полиморфизм
 * @Задание 8. Реализация меню за счет шаблона стратегия. [181780# 271511] (ver.6)
 * @Описание 1. Произведите изменения проекта "Tracker" для различных действий. Добавьте использование UserAction.
 * 2. Реализуйте интерфейс UserAction используя шаблон "Стратегия".
 * 3. Загрузите код в github. Оставьте ссылку на коммит.
 *
 * @Раздел Блок 2. ООП / 4. Полиморфизм
 * @Задание 9.1 Рефакторинг теста @Before @After. [33568#271501] (ver.7)
 * @Описание 1. Произведите рефакторинг проекта. Нам нужно заменить вывод в консоль на интрефейс Output.
 * Тесты на проверку вывода в консоль мы напишем в следующем уроке.
 * После рефакторинга запустите приложение через main и проверьте, что оно работает.
 * 2. Загрузите код в github. Оставьте ссылку на коммит.
 *
 * @Раздел Блок 2. ООП / 4. Полиморфизм
 * @Задание 9.2. Тесты вывода на консоль в StartUI. [33585#271502] (ver.8)
 * @Описание 1. Произвести тестирование классов FindAllAction, FindByNameAction, FindByIdAction.
 * 2. Загрузите код в github. Оставьте ссылку на коммит.
 *
 * @Раздел Блок 2. ООП / 5. Исключения
 * @Задание 1. Обеспечить бесперебойную работу приложения Tracker. [789#271528] (ver.9)
 * @Описание 1. Произведите рефакторинг кода. Нужно будет обеспечить бесперебойную работу приложения Tracker (обработать
 * появление исключений). Добавьте обработку ситуаций: ввод несуществующего пункта меню, ввода строки вместо числа.
 * 2. Загрузите код в github. Оставьте ссылку на коммит.
 *
 * @Раздел Блок 2. ООП / 5. Исключения
 * @Задание 2. Рефакторинг - Шаблон Декоратор для валидатора. [34117#271519] (ver.10)
 * @Описание 1. Произвести рефакторинг кода класса ru.job4j.tracker.ValidateInput с использованием шаблона Декоратор.
 * 2. Загрузите код в github. Оставьте ссылку на коммит.
 *
 * @Раздел Блок 2. ООП / 4. Полиморфизм
 * @Задание Чистка класса StartUI. (ver.11)
 * @Описание 1. Как бы он не выглядел у Вас на данный момент (класс StartUI), требуется очистить его содержимое класса
 * и его доработку мы начнем с пустого каркаса.
 * 2. Загрузите код в github. Оставьте ссылку на коммит.
 *
 * @Раздел Блок 2. ООП / 4. Полиморфизм
 * @Задание Удаление тестов StartUITest. (ver.12)
 * @Описание 1. Как бы он не выглядел у Вас на данный момент (класс StartUI), требуется очистить его содержимое класса
 * и его доработку мы начнем с пустого каркаса. А также тесты, которые не пойдут!
 * 2. Загрузите код в github. Оставьте ссылку на коммит.
 *
 * @Раздел Блок 2. ООП / 4. Полиморфизм
 * @Задание 2.2. Реализация класса StartUI. Вывод меню. [#500743] (ver.13)
 * @Описание 1. Доработайте класс StartUI в соответствии с описанием.
 * 2. Загрузите код в github. Оставьте ссылку на коммит.
 *
 * @Раздел Блок 2. ООП / 4. Полиморфизм
 * @Задание 2.3. Реализация класса StartUI. Добавление заявки. [#500744] (ver.14)
 * @Описание 1. Доработайте класс StartUI - добавьте возможность добавления заявки в хранилище в соответствии с описанием.
 * Дорабатывать мы будем метод init(), в остальной части правки в код вносить не нужно.
 * 2. Загрузите код в github. Оставьте ссылку на коммит.
 *
 * @Раздел Блок 2. ООП / 4. Полиморфизм
 * @Задание 2.4. Реализация класса StartUI. Вывод всех заявок. [#500745] (ver.15)
 * @Описание 1. В этом задании доработаем наше приложение так, чтобы при выборе пункта меню с номером 1 в консоль
 * выводились все заявки, которые мы добавили в хранилище.
 * 2. Загрузите код в github. Оставьте ссылку на коммит.
 *
 * @Раздел Блок 2. ООП / 4. Полиморфизм
 * @Задание 2.5. Реализация класса StartUI. Изменение заявки. [#500746] (ver.16)
 * @Описание 1. В этом задании мы добавим в наше приложение возможность редактирования заявки (пункт меню 2).
 * 2. Загрузите код в github. Оставьте ссылку на коммит.
 *
 * @Раздел Блок 2. ООП / 4. Полиморфизм
 * @Задание 2.6. Реализация класса StartUI. Удаление заявки. [#500747] (ver.17)
 * @Описание 1. В этом задании мы добавим в наше приложение возможность удалить заявку (пункт меню 3).
 * 2. Загрузите код в github. Оставьте ссылку на коммит.
 *
 * @Раздел Блок 2. ООП / 4. Полиморфизм
 * @Задание 2.7. Реализация класса StartUI. Вывод заявки по id. [#500748] (ver.18)
 * @Описание 1. В этом задании мы добавим возможность поиска заявки по id и вывода ее в консоль (пункт меню 4).
 * 2. Загрузите код в github. Оставьте ссылку на коммит.
 *
 * @Раздел Блок 2. ООП / 4. Полиморфизм
 * @Задание 2.8. Реализация класса StartUI. Вывод заявок по имени. [#500749] (ver.19)
 * @Описание 1. В этом задании мы добавим возможность вывода в консоль заявок, которые найдены по имени (пункт меню 5).
 * 2. Загрузите код в github. Оставьте ссылку на коммит.
 * @author Sergei Begletsov
 * @since 23.05.2021
 * @version 19
 */

public class StartUI {
    public void init(Scanner scanner, Tracker tracker) {
        boolean run = true;
        while (run) {
            showMenu();
            System.out.print("Select: ");
            int select = Integer.parseInt(scanner.nextLine());
            if (select == 0) {
                System.out.println("=== Create a new Item ====");
                System.out.print("Enter name: ");
                String name = scanner.nextLine();
                Item item = new Item(name);
                tracker.add(item);
                System.out.println("Добавленная заявка: " + item);
            } else if (select == 1) {
                System.out.println("=== Show all items ====");
                Item[] items = tracker.findAll();
                if (items.length > 0) {
                    for (Item item : items) {
                        System.out.println(item);
                    }
                } else {
                    System.out.println("Хранилище еще не содержит заявок");
                }
            } else if (select == 2) {
                System.out.println("=== Edit item ====");
                System.out.print("Enter id: ");
                int id = Integer.parseInt(scanner.nextLine());
                System.out.print("Enter name: ");
                String name = scanner.nextLine();
                Item item = new Item(name);
                if (tracker.replace(id, item)) {
                    System.out.println("Заявка изменена успешно.");
                } else {
                    System.out.println("Ошибка замены заявки.");
                }
            } else if (select == 3) {
                System.out.println("=== Delete item ====");
                System.out.print("Enter id: ");
                int id = Integer.parseInt(scanner.nextLine());
                if (tracker.delete(id)) {
                    System.out.println("Заявка удалена успешно.");
                } else {
                    System.out.println("Ошибка удаления заявки.");
                }
            } else if (select == 4) {
                System.out.println("=== Find item by id ====");
                System.out.print("Enter id: ");
                int id = Integer.parseInt(scanner.nextLine());
                Item item = tracker.findById(id);
                if (item != null) {
                    System.out.println(item);
                } else {
                    System.out.println("Заявка с введенным id: " + id + " не найдена.");
                }
            } else if (select == 5) {
                System.out.println("=== Find items by name ====");
                System.out.print("Enter name: ");
                String name = scanner.nextLine();
                Item[] items = tracker.findByName(name);
                if (items.length > 0) {
                    for (Item item : items) {
                        System.out.println(item);
                    }
                } else {
                    System.out.println("Заявки с именем: " + name + " не найдены.");
                }
            } else if (select == 6) {
                run = false;
            }
        }
    }

    private void showMenu() {
        String[] menu = {
                "Add new Item", "Show all items", "Edit item",
                "Delete item", "Find item by id", "Find items by name",
                "Exit Program"
        };
        System.out.println("Menu:");
        for (int i = 0; i < menu.length; i++) {
            System.out.println(i + ". " + menu[i]);
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Tracker tracker = new Tracker();
        new StartUI().init(scanner, tracker);
    }
}
